name: x-test
summary: xtest for optee
description: |
 This is xtest with TAs unsigned
version: 3.x
type: app

base: core20

architectures:
  - build-on: arm64

confinement: strict
grade: stable

environment:
    LD_LIBRARY_PATH: ${SNAP}/tmp/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}
    PATH: ${SNAP}/bin:${SNAP}/tmp/bin:${SNAP}/tmp/usr/sbin:${PATH}

layout:
    /usr/lib/optee_armtz:
        bind: $SNAP_COMMON/lib/optee_armtz
    /usr/lib/tee-supplicant/plugins:
        bind: $SNAP_COMMON/usr/lib/tee-supplicant/plugins

apps:
    xtest:
        command: bin/wrapper xtest
        plugs:
            - network-bind
            - tee
            - home
            - xtest
    tee-supplicant:
        command: bin/wrapper tee-supplicant
        daemon: simple
        install-mode: disable
        plugs:
            - tee
            - network
            - xtest
    sign-ta:
        command: bin/wrapper sign-ta
        plugs:
            - xtest
    unsign-ta:
        command: bin/wrapper unsign-ta
        plugs:
            - xtest

    import:
        command: bin/wrapper import


parts:
    tee-kit:
        plugin: nil
        override-build: |
            git clone https://github.com/OP-TEE/optee_os.git
            git clone https://github.com/OP-TEE/optee_client.git
            git clone https://github.com/OP-TEE/optee_test.git
            cp -r optee_* ${SNAPCRAFT_PART_SRC}/
            pip3 install -U cryptography>=35.0.0
            rm -fr *

            for ver in {14..22}
            do
                version=3."${ver}".0

                for rpmb_emu in {0..1}
                do
                    inst_dir="$([ "${rpmb_emu}" == "0" ] && echo "${version}-rpmb" || echo "${version}")"
                    mkdir -p ${SNAPCRAFT_PART_INSTALL}/"${inst_dir}"

                    # optee-os procedure
                    cd ${SNAPCRAFT_PART_BUILD}
                    cp -r ${SNAPCRAFT_PART_SRC}/optee_os .
                    cd optee_os
                    git checkout "${version}"

            cat << EOF > build.sh
                #! /bin/bash
                export ARCH="arm"
                export CROSS_COMPILE="${SNAPCRAFT_ARCH_TRIPLET}-"
                export CROSS_COMPILE_core="${SNAPCRAFT_ARCH_TRIPLET}-"
                export CROSS_COMPILE_ta_arm64="${SNAPCRAFT_ARCH_TRIPLET}-"
                export CFG_USER_TA_TARGETS="ta_arm64"
                export CFG_ARM64_core=y
                export DEBUG=0 \
                export CFG_TEE_CORE_LOG_LEVEL=1 \
                export CFG_TEE_TA_LOG_LEVEL=1 \
                export CFG_TEE_BENCHMARK=n
                export CFG_CORE_HEAP_SIZE=262144
                export PLATFORM=imx
                export PLATFORM_FLAVOR=mx8mmevk
                export CFG_CORE_HUK_SUBKEY_COMPAT_USE_OTP_DIE_ID=n

                make O=${SNAPCRAFT_PART_BUILD}/optee_os/out -j$(nproc)
            EOF
                    chmod +x build.sh
                    sh build.sh
                    cp -r ${SNAPCRAFT_PART_BUILD}/optee_os/out/export-ta_arm* ${SNAPCRAFT_PART_INSTALL}/"${inst_dir}"/export-ta_arm


                    # optee-client procedure
                    cd ${SNAPCRAFT_PART_BUILD}
                    cp -r ${SNAPCRAFT_PART_SRC}/optee_client .
                    cd optee_client
                    git checkout "${version}"

            cat << EOF > build.sh
                #! /bin/bash
                export ARCH="arm64"
                export LDFLAGS="-Wl,--strip-all"
                export DEBUG=0 \
                export CROSS_COMPILE="${SNAPCRAFT_ARCH_TRIPLET}-"
                export CFG_TEE_CLIENT_LOAD_PATH="" \
                export CFG_TA_TEST_PATH=0 \
                export CFG_TEE_SUPP_LOG_LEVEL=0 \
                export SBINDIR=/usr/sbin
                export LIBDIR="/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}"
                export RPMB_EMU=${rpmb_emu}

                # we need new python cryptography
                make -j$(nproc)
            EOF
                    chmod +x build.sh
                    sh build.sh
                    cp -r out/export/usr "${SNAPCRAFT_PART_INSTALL}"/"${inst_dir}"/

                    # optee-test
                    cd ${SNAPCRAFT_PART_BUILD}
                    cp -r ${SNAPCRAFT_PART_SRC}/optee_test .
                    cd optee_test
                    git checkout "${version}"

            cat << EOF > build.sh
                #! /bin/bash
                export CROSS_COMPILE="${SNAPCRAFT_ARCH_TRIPLET}-"
                export TA_DEV_KIT_DIR="${SNAPCRAFT_PART_INSTALL}/${inst_dir}/export-ta_arm"
                export CFG_TEE_CLIENT_LOG_LEVEL="2"
                export OPTEE_CLIENT_EXPORT="${SNAPCRAFT_PART_INSTALL}/${inst_dir}/usr"
                export DESTDIR="${SNAPCRAFT_PART_INSTALL}/${inst_dir}"
                export WITH_OPENSSL="y"
                export CFG_PKCS11_TA="y"
                export BINDIR="/usr/bin"
                export LIBDIR="/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}"
                export SBINDIR="/usr/sbin"
                export ARCH="${SNAPCRAFT_TARGET_ARCH}"
                export CFG_USER_TA_TARGETS="ta_arm64"
                export CROSS_COMPILE_ta_arm64="${SNAPCRAFT_ARCH_TRIPLET}-"
                export O="${SNAPCRAFT_PART_BUILD}/optee_test/out"
                export LDFLAGS="-L${SNAPCRAFT_PART_INSTALL}/${inst_dir}/usr/lib -L${SNAPCRAFT_PART_INSTALL}/${inst_dir}/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}"
                export CPPFLAGS=-isystem${SNAPCRAFT_PART_INSTALL}/${inst_dir}/usr/include
                export CFLAGS=-isystem${SNAPCRAFT_PART_INSTALL}/${inst_dir}/usr/include
                make -j$(nproc)
                make install
                mkdir -p ${SNAPCRAFT_PART_INSTALL}/${inst_dir}/unsigned_elf
                find  ${SNAPCRAFT_PART_BUILD}/optee_test/out -name *stripped.elf -exec cp {} ${SNAPCRAFT_PART_INSTALL}/${inst_dir}/unsigned_elf \;

            EOF
                    chmod +x build.sh
                    sh build.sh

                    #Post build procedure
                    cp ${SNAPCRAFT_PART_INSTALL}/"${inst_dir}"/export-ta_arm/scripts/sign_encrypt.py ${SNAPCRAFT_PART_INSTALL}/"${inst_dir}"/bin
                    cp ${SNAPCRAFT_PART_INSTALL}/"${inst_dir}"/export-ta_arm/ta/fd02c9da-306c-48c7-a49c-bbd827ae86ee.ta ${SNAPCRAFT_PART_INSTALL}/"${inst_dir}"/lib/optee_armtz/
                    cd ${SNAPCRAFT_PART_BUILD}
                    rm -fr ${SNAPCRAFT_PART_INSTALL}/"${inst_dir}"/export-ta_arm
                    rm -fr *
                done
            done
    wrapper:
        plugin: nil
        override-build: |
            cat << EOF > wrapper
            #! /bin/bash
            cmd="\$1"
            shift
            if [ "\$cmd" == "xtest" ]
            then
                if [ "\$1" == "--install-ta" ]
                then
                    "\$cmd" "\$1" \$SNAP_COMMON/lib/optee_armtz
                elif [ "\$1" == "-t" ]
                then
                    "\$cmd" "\$@"
                else
                    "\$cmd" --install-ta \$SNAP_COMMON/lib/optee_armtz
                    "\$cmd" "\$@"
                fi
            elif [ "\$cmd" == "tee-supplicant" ]
            then
               if ! snapctl is-connected xtest; then
                   echo "Please connect the "xtest" interface:"
                   echo "  sudo snap connect x-test:xtest x-test:xtest-<314~322>"
                   echo "and then start tee-supplicant service"
                   echo "  sudo snap start x-test.tee-supplicant"
                   exit 1
               else
                   "\$cmd" --fs-parent-path /var/lib/snapd/save/snap/\$SNAP_INSTANCE_NAME/optee-fs --ta-dir \$SNAP_COMMON/lib/optee_armtz --plugin-path \$SNAP_COMMON/usr/lib/tee-supplicant/plugins
               fi
            elif [ "\$cmd" == "sign-ta" ]
            then
                for ta in \$SNAP/tmp/unsigned_elf/*
                do
                    ta_name=\`basename \$ta\`
                    user_ta_uuid=\`echo \$ta_name | awk -F. '{print \$1}'\`
                    sign_encrypt.py \\
                    \$@ \\
                    --uuid \$user_ta_uuid \\
                    --ta-version 0 \\
                    --in \$SNAP/tmp/unsigned_elf/"\$user_ta_uuid".stripped.elf --out \$SNAP_COMMON/lib/optee_armtz/"\$user_ta_uuid".ta
                done
            elif [ "\$cmd" == "unsign-ta" ]
            then
                cp \$SNAP/tmp/lib/optee_armtz/* \$SNAP_COMMON/lib/optee_armtz
            elif [ "\$cmd" == "import" ]
            then
                rm -f \$SNAP_COMMON/lib/optee_armtz/*
                cp \$@/* \$SNAP_COMMON/lib/optee_armtz
            fi

            EOF

            chmod +x wrapper
            mkdir ${SNAPCRAFT_PART_INSTALL}/bin
            mkdir ${SNAPCRAFT_PART_INSTALL}/tmp
            cp wrapper ${SNAPCRAFT_PART_INSTALL}/bin
            mkdir -p ${SNAPCRAFT_PART_INSTALL}/lib/optee_armtz


build-packages:
    - bison
    - build-essential
    - device-tree-compiler
    - flex
    - libxml2-dev
    - libssl-dev
    - python3
    - python3-crypto
    - python3-pip
    - python3-pyelftools
    - python3-pycryptodome
    - wget
    - pkg-config
    - uuid-dev
    - zlib1g-dev
plugs:
    xtest:
        interface: content
        target: $SNAP/tmp
slots:
    xtest-314:
        interface: content
        read:
            - $SNAP/3.14.0
    xtest-314-rpmb:
        interface: content
        read:
            - $SNAP/3.14.0-rpmb
    xtest-315:
        interface: content
        read:
            - $SNAP/3.15.0
    xtest-315-rpmb:
        interface: content
        read:
            - $SNAP/3.15.0-rpmb
    xtest-316:
        interface: content
        read:
            - $SNAP/3.16.0
    xtest-316-rpmb:
        interface: content
        read:
            - $SNAP/3.16.0-rpmb
    xtest-317:
        interface: content
        read:
            - $SNAP/3.17.0
    xtest-317-rpmb:
        interface: content
        read:
            - $SNAP/3.17.0-rpmb
    xtest-318:
        interface: content
        read:
            - $SNAP/3.18.0
    xtest-318-rpmb:
        interface: content
        read:
            - $SNAP/3.18.0-rpmb
    xtest-319:
        interface: content
        read:
            - $SNAP/3.19.0
    xtest-319-rpmb:
        interface: content
        read:
            - $SNAP/3.19.0-rpmb
    xtest-320:
        interface: content
        read:
            - $SNAP/3.20.0
    xtest-320-rpmb:
        interface: content
        read:
            - $SNAP/3.20.0-rpmb
    xtest-321:
        interface: content
        read:
            - $SNAP/3.21.0
    xtest-321-rpmb:
        interface: content
        read:
            - $SNAP/3.21.0-rpmb
    xtest-322:
        interface: content
        read:
            - $SNAP/3.22.0
    xtest-322-rpmb:
        interface: content
        read:
            - $SNAP/3.22.0-rpmb
